generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  email     String    @unique
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  bookings  Booking[]

  @@map("User")
}



model Barbershop {
  id          String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  address     String
  phone       String?
  description String?
  imageUrl    String?             @map("image_url")
  createdAt   DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime            @updatedAt @map("updated_at") @db.Timestamptz(6)
  services    BarbershopService[]
  bookings    Booking[]

  @@map("Barbershop")
}

model BarbershopService {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  barbershopId String     @map("barbershop_id") @db.Uuid
  name         String
  description  String?
  imageUrl     String?    @map("image_url")
  price        Decimal    @db.Decimal(10, 2)
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime   @updatedAt @map("updated_at") @db.Timestamptz(6)
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  bookings     Booking[]

  @@map("BarbershopService")
}

model Booking {
  id           String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  serviceId    String            @map("service_id") @db.Uuid
  barbershopId String            @map("barbershop_id") @db.Uuid
  userId       String            @map("user_id") @db.Uuid
  clientName   String            @map("client_name")
  clientPhone  String            @map("client_phone")
  date         DateTime          @db.Timestamptz(6)
  createdAt    DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime          @updatedAt @map("updated_at") @db.Timestamptz(6)
  user         User              @relation(fields: [userId], references: [id])
  service      BarbershopService @relation(fields: [serviceId], references: [id])
  barbershop   Barbershop        @relation(fields: [barbershopId], references: [id])

  @@map("Booking")
}
